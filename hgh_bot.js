const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');
const sequelize = require('./db.js');
const User = require('./models/user.js')
require('dotenv').config();
const { checkAndUpdateRequestLimit } = require('./serviceCheckLimits.js');
const { encodeImageToBase64 } = require('./serviceEncodeimage.js');
const { resetLimitRequest } = require('./serviceCron.js');

const tgBotToken = process.env.TG_BOT_TOKEN;
const openaiApiKey = process.env.OPENAI_API_KEY;
const logChannelId = '-1002452793233';

const openai = new OpenAI({
    apiKey: openaiApiKey,
});

const SYSTEM_MESSAGE = {
    role: "system",
    content: "GPT Role: You are a plant care expert. Response Language: Always respond in Russian. Task: Provide accurate, friendly, and motivating advice on watering, lighting, repotting, diseases, pests, and selecting plants for various conditions (light, humidity, temperature, space). If necessary, ask for more details if the initial information is insufficient. Restriction: Only answer questions about plants. Politely refuse to answer questions on other topics, explaining that you specialize exclusively in plants. Do not use the * and # symbols in your answers."
};

const bot = new TelegramBot(tgBotToken, { polling: true });

resetLimitRequest();

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.chat.username || 'Unknown';
    const userId = msg.from.id.toString();
    const userMessage = msg.text || msg.caption || '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    let imageBase64 = null;

    try {
        if (userMessage === '/start') {
            const user = await User.findByPk(userId)
            if (!user) {
                await bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ ‚Äî —è –ø–æ–º–æ–≥—É! üíö');
                return
            }

        }
        await bot.sendMessage(chatId, "ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...");
        const isAllowed = await checkAndUpdateRequestLimit(userId);
        if (!isAllowed) {
            await bot.sendMessage(chatId, 'ü§ñ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (5 –≤ —Å—É—Ç–∫–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.');
            return;
        }


        let messageContent = `–ß–∞—Ç: ${chatId}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username} (${userId})\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${userMessage}`;

        if (msg.photo) {
            const photoFileId = msg.photo[msg.photo.length - 1].file_id;
            await bot.sendPhoto(logChannelId, photoFileId, { caption: messageContent });
        }

        if (msg.video) {
            const videoFileId = msg.video.file_id;
            await bot.sendVideo(logChannelId, videoFileId, { caption: messageContent });
        }

        if (msg.voice) {
            const voiceFileId = msg.voice.file_id;
            await bot.sendVoice(logChannelId, voiceFileId, { caption: messageContent });
        }
        if (!msg.photo && !msg.video && !msg.voice) {
            await bot.sendMessage(logChannelId, messageContent);
        }


        if (msg.photo) {
            const photo = msg.photo[msg.photo.length - 1];
            const fileId = photo.file_id;

            const imageUrl = await bot.getFileLink(fileId);
            imageBase64 = await encodeImageToBase64(imageUrl);
        }
        const messages = [
            SYSTEM_MESSAGE,
            { role: "user", content: userMessage }, // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        ];

        if (imageBase64) {
            messages.push({
                role: "user",
                content: [
                    {
                        type: "text",
                        text: userMessage + "–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã, –¥–æ–±–∞–≤–ª—è–π –±–æ–ª—å—à–µ–π emoji –ø–æ —Å–º—ã—Å–ª—É –∏ –ø—ã—Ç–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã",
                    },
                    {
                        type: "image_url",
                        image_url: {
                            url: `data:image/jpeg;base64,${imageBase64}`,
                        },
                    },
                ],
            });
        }

        const response = await openai.chat.completions.create({
            model: "gpt-4-turbo", // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            messages,
        });

        const botResponse = response.choices[0].message.content.trim().replace(/[#*]/g, '');
        await bot.sendMessage(chatId, botResponse);
        await bot.sendMessage(logChannelId, `–ß–∞—Ç: ${chatId}\n–û—Ç–≤–µ—Ç –±–æ—Ç–∞:\n ${botResponse}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error.message || error);
        await bot.sendMessage(chatId, 'ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

const startServer = async () => {
    try {
        await sequelize.authenticate();
        await sequelize.sync();
        console.log('Connected to database...');
    } catch (error) {
        console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', error);
    }
};

startServer();